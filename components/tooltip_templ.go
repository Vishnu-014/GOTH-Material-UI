// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Tooltip() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n        document.addEventListener(\"DOMContentLoaded\", () => {\n            // Remove tooltip on outside click\n            document.addEventListener(\"click\", (event) => {\n                const active = document.querySelector(\".custom-tooltip\");\n                if (\n                    active &&\n                    !active.contains(event.target) &&\n                    !event.target.matches(\"[data-tooltip-title]\")\n                ) {\n                    active.remove();\n                }\n            });\n\n            // Show tooltip on icon click\n            document.querySelectorAll(\"[data-tooltip-title]\").forEach((icon) => {\n                icon.addEventListener(\"click\", (e) => {\n                    e.stopPropagation();\n\n                    document.querySelectorAll(\".custom-tooltip\").forEach(t => t.remove());\n\n                    const title = icon.getAttribute(\"data-tooltip-title\") || \"\";\n                    const desc = icon.getAttribute(\"data-tooltip-desc\") || \"\";\n                    const position = icon.getAttribute(\"data-tooltip-position\") || \"top\";\n\n                    const tooltip = document.createElement(\"div\");\n                    tooltip.className = `custom-tooltip tooltip-${position}`;\n                    tooltip.innerHTML = `\n                        <div class=\"tooltip-content\">\n                            <div class=\"tooltip-header\">\n                                <strong>${title}</strong>\n                                <button class=\"tooltip-close\">&times;</button>\n                            </div>\n                            <div class=\"tooltip-desc\">${desc}</div>\n                        </div>\n                        <div class=\"tooltip-arrow\"></div>\n                    `;\n                    document.body.appendChild(tooltip);\n\n                    const iconRect = icon.getBoundingClientRect();\n                    const tooltipRect = tooltip.getBoundingClientRect();\n\n                    let top, left;\n\n                    switch (position) {\n                        case \"bottom\":\n                            top = iconRect.bottom + 10 + window.scrollY;\n                            left = iconRect.left + iconRect.width / 2 - tooltipRect.width / 2 + window.scrollX;\n                            break;\n                        case \"left\":\n                            top = iconRect.top + iconRect.height / 2 - tooltipRect.height / 2 + window.scrollY;\n                            left = iconRect.left - tooltipRect.width - 10 + window.scrollX;\n                            break;\n                        case \"right\":\n                            top = iconRect.top + iconRect.height / 2 - tooltipRect.height / 2 + window.scrollY;\n                            left = iconRect.right + 10 + window.scrollX;\n                            break;\n                        case \"top\":\n                        default:\n                            top = iconRect.top - tooltipRect.height - 10 + window.scrollY;\n                            left = iconRect.left + iconRect.width / 2 - tooltipRect.width / 2 + window.scrollX;\n                            break;\n                    }\n\n                    tooltip.style.top = `${top}px`;\n                    tooltip.style.left = `${left}px`;\n\n                    tooltip.querySelector(\".tooltip-close\").addEventListener(\"click\", () => {\n                        tooltip.remove();\n                    });\n                });\n            });\n        });\n    </script><style>\n        .custom-tooltip {\n            position: absolute;\n            background: #fff;\n            color: #000;\n            border: 1px solid #ccc;\n            border-radius: 6px;\n            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);\n            padding: 12px;\n            width: 260px;\n            font-family: sans-serif;\n            z-index: 9999;\n        }\n\n        .tooltip-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .tooltip-close {\n            background: none;\n            border: none;\n            font-size: 18px;\n            cursor: pointer;\n        }\n\n        .tooltip-desc {\n            margin-top: 6px;\n            font-size: 14px;\n        }\n\n        .tooltip-arrow {\n            position: absolute;\n            width: 0;\n            height: 0;\n        }\n\n        /* Arrow styles based on direction */\n        .tooltip-top .tooltip-arrow {\n            bottom: -10px;\n            left: 50%;\n            transform: translateX(-50%);\n            border-left: 10px solid transparent;\n            border-right: 10px solid transparent;\n            border-top: 10px solid #fff;\n            filter: drop-shadow(0 1px 1px rgba(0,0,0,0.2));\n        }\n\n        .tooltip-bottom .tooltip-arrow {\n            top: -10px;\n            left: 50%;\n            transform: translateX(-50%);\n            border-left: 10px solid transparent;\n            border-right: 10px solid transparent;\n            border-bottom: 10px solid #fff;\n            filter: drop-shadow(0 -1px 1px rgba(0,0,0,0.2));\n        }\n\n        .tooltip-left .tooltip-arrow {\n            top: 50%;\n            right: -10px;\n            transform: translateY(-50%);\n            border-top: 10px solid transparent;\n            border-bottom: 10px solid transparent;\n            border-left: 10px solid #fff;\n            filter: drop-shadow(1px 0px 1px rgba(0,0,0,0.2));\n        }\n\n        .tooltip-right .tooltip-arrow {\n            top: 50%;\n            left: -10px;\n            transform: translateY(-50%);\n            border-top: 10px solid transparent;\n            border-bottom: 10px solid transparent;\n            border-right: 10px solid #fff;\n            filter: drop-shadow(-1px 0px 1px rgba(0,0,0,0.2));\n        }\n    </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
